#!/bin/bash

HELL_DIR=~/.hell
FILE_CONF=${HELL_DIR}/services.json
FILE_PID=${HELL_DIR}/pids.json

mkdir -p ${HELL_DIR}

# TESTED
help() {
	echo " Hell - utility to controll daemons"
	echo " $ $0 [-h|-?|--help]"
	echo " $ $0 ctl <service_name> [ start | stop | restart | reload | status ]"
	echo " $ $0 conf <service_name> [ [ add | update ] [ -d=<dir> ] [ -c=<cmd> ] [ -e=<env_file> ] | delete | show ]"
	echo " $ $0 status"
	echo ""
	echo "Commands:"
	echo "   conf - work with configurations"
	echo "   ctl - controll panel"
	echo "   status - print status of all daemons"
	echo ""
	echo " Flags:"
	echo "   -h , -? , --help"
	echo "       See this nice message again :3"
	echo ""
	echo " Flags for conf:"
	echo "   add"
	echo "        add new service to config"
	echo "        must be also passed --cmd, --dir and --env"
	echo ""
	echo "   update"
	echo "        update service in config"
	echo "        must be also passed --cmd, --dir or --env"
	echo ""
	echo "   show"
	echo "        show service's config"
	echo ""
	echo "   delete"
	echo "        delete service from config"
	echo ""
	echo " Args for conf:"
	echo "   -c=<cmd> |--cmd=<cmd>"
	echo "       command to be executed"
	echo "   -d=<dir> |--dir=<dir>"
	echo "       dir to be changed before executing"
	echo "   -e=<env_file> |--env=<env_file>"
	echo "       file with enviroment variables"
	echo ""
	echo " Flags for ctl:"
	echo "   start, stop, restart"
	echo "        Start/Stop/Restart service"
	echo ""
	echo "   reload"
	echo "        Reload configuration"
	echo ""
	echo "   status"
	echo "        Print current status"
	echo ""
	exit
}

hell_parse_argv() {
	for i in "$@" ; do
		case $i in
			-c=*|--cmd=*)
				ARGV_CMD="${i#*=}"
			;;
			-d=*|--dir=*)
				ARGV_DIR="${i#*=}"
				if [ ! -d "${ARGV_DIR}" ]; then
					echo "directory does not exists: ${ARGV_DIR}"
					exit 1
				fi
			;;
			-e=*|--env=*)
				ARGV_ENV="${i#*=}"
				if [ ! -f "${ARGV_ENV}" ]; then
					echo "file does not exists: ${ARGV_ENV}"
					exit 1
				fi
			;;
		esac
	done
}

hell_load_check_json_file() {
	if ! cat $1 | json_pp > /dev/null 2> /dev/null ; then
		echo '{}' > $1
	fi
}

hell_load_service_info() {
	SERVICE=$1
	if [ ! -f ${FILE_CONF} ] ; then
		echo "Service '${SERVICE}' not found! (file not exists)"
		exit 1
	fi
	hell_load_check_json_file ${FILE_CONF}
	SERVICE_DATA=`cat ${FILE_CONF} | jshon -Q -e ${SERVICE}`
	if [ -z "${SERVICE_DATA}" ] ; then
		echo "Service '${SERVICE}' not found! (service not configured)"
		exit 1
	fi
	hell_load_check_json_file ${FILE_PID}
	if [ -f ${FILE_PID} ] ; then
		SERVICE_PID=`cat ${FILE_PID} | jshon -Q -e ${SERVICE} -u`
	else
		SERVICE_PID=
	fi
}

hell_status() {
	hell_status_single() {
		pid=`cat ${FILE_PID} | jshon -Q -e $1 -u`
		if [ -z $pid ] ; then
			echo "Not started"
		else
			if kill -0 $pid > /dev/null 2> /dev/null ; then
				echo "Running"
			else
				echo "Stopped"
			fi
		fi
	}
	hell_load_check_json_file ${FILE_CONF}
	hell_load_check_json_file ${FILE_PID}
	for service_name in `cat ${FILE_CONF} | jshon -Q -k` ; do
		echo ${service_name}" - "`hell_status_single ${service_name}`
	done
}


hell_ctl() {

	hell_ctl_start() {
		if [ ! -z ${SERVICE_PID} ] && kill -0 ${SERVICE_PID} > /dev/null 2> /dev/null ; then
			echo "Service already running"
		else			
			echo "starting '${SERVICE}'"
			cd `echo ${SERVICE_DATA} | jshon -Q -e dir -u`
			local cmd=`echo ${SERVICE_DATA}|jshon -Q -e cmd -u`
			local envfile=`echo ${SERVICE_DATA}|jshon -Q -e env -u`
			if [ ! -z ${envfile} ] && [ -f ${envfile} ] ; then
				. ${envfile}
			fi
			nohup ${cmd} > /dev/null 2>/dev/null &
			SERVICE_PID=$!
			cd - > /dev/null 2>/dev/null
			if [ -f ${FILE_PID} ] ; then
				local cfg=`cat ${FILE_PID}`
			else
				local cfg='{}'
			fi
			res=`echo $cfg | jshon -Q -s ${SERVICE_PID} -i ${SERVICE} `
			echo $res > ${FILE_PID}
			echo "service started; Pid = ${SERVICE_PID}"
		fi
	}

	hell_ctl_stop() {
		if [ ! -z ${SERVICE_PID} ] ; then
			echo "stopping '${SERVICE}'"
			local pids=`pgrep -P ${SERVICE_PID}`
			kill ${SERVICE_PID} ${pids} > /dev/null 2> /dev/null
			sleep 2
			for pid in ${pids} ; do
				kill -9 ${pid} > /dev/null 2> /dev/null
			done
			kill -9 ${SERVICE_PID} > /dev/null 2> /dev/null
			if [ -f ${FILE_PID} ] ; then
				local cfg=`cat ${FILE_PID}`
			else
				local cfg='{}'
			fi
			echo $cfg | jshon -Q -d ${SERVICE} > ${FILE_PID}
			echo "Service was stopped"
		else
			echo "Service was not started"
		fi
	}

	hell_ctl_status() {
		echo "status of '${SERVICE}'"
		if [ ! -z ${SERVICE_PID} ] ; then
			if kill -0 ${SERVICE_PID} > /dev/null 2> /dev/null ; then
				echo "Service is running"
			else
				echo "Service stopped"
			fi
		else
			echo "Service was not started"
		fi
	}

	hell_ctl_restart() {
		echo "restarting ${SERVICE}"
		hell_ctl_stop
		sleep 2
		hell_ctl_start
	}

	hell_ctl_reload() {
		echo "reloading '${SERVICE}'"
		if [ ! -z ${SERVICE_PID} ] && kill -0 ${SERVICE_PID} > /dev/null 2> /dev/null ; then
			kill -1 ${SERVICE_PID}
		else
			echo "Service is not running"
			exit 1
		fi
	}


	case "$2" in
		"start" | "stop" | "status" | "restart" | "reload")
			hell_load_service_info $1
			local i=$2
			shift
			shift
			"hell_ctl_$i" $@
		;;
		*)
			echo "Unknown command for ctl: $1"
			echo "For more info run $ $0 -h"
		;;
	esac
}

hell_conf() {
	hell_conf_add() {
		# check if $1 not exitst
		SERVICE=$1
		echo "add service '${SERVICE}'"
		hell_parse_argv $@
		local args=(-n {})
		if [ -z "${ARGV_CMD}" ] ; then
			echo "arg -c was not passed :("
			exit 1
		else
			args+=(-s "${ARGV_CMD}" -i cmd)
		fi
		if [ -z ${ARGV_DIR} ] ; then
			echo "arg -d was not passed :("
			exit 1
		else
			args+=(-s ${ARGV_DIR} -i dir)
		fi
		if [ -z ${ARGV_ENV} ] ; then
			echo "arg -e was not passed."
			echo "That's not a problem, u can update info later."
		else
			args+=(-s ${ARGV_ENV} -i env)
		fi
		if [ -f ${FILE_CONF} ] ; then
			hell_load_check_json_file ${FILE_CONF}
			local cfg=`cat ${FILE_CONF}`
		else
			local cfg="{}"
		fi
		echo ${cfg} | jshon ${args[@]} -i "${SERVICE}" > ${FILE_CONF}
	}

	hell_conf_update() {
		echo "update service '${SERVICE}'"
		hell_parse_argv $@
		args=()
		if [ ! -z ${ARGV_CMD} ] ; then
			args+=(-s ${ARGV_CMD} -i cmd)
		fi
		if [ ! -z ${ARGV_DIR} ] ; then
			args+=(-s ${ARGV_DIR} -i dir)
		fi
		if [ ! -z ${ARGV_ENV} ] ; then
			args+=(-s ${ARGV_ENV} -i env)
		fi
		if  [[ ${#args[@]} -le 0 ]] ; then
			echo "nothing to update; run -h to read help"
			exit 1
		fi
		local res=`cat ${FILE_CONF}`
		echo $res | jshon -Q -e ${SERVICE} ${args[@]} -i ${SERVICE} > ${FILE_CONF}
	}

	hell_conf_show() {
		if [ -f ${FILE_CONF} ] ; then
			echo "Service config"
			echo "service: '${SERVICE}'"
			echo "data: "`echo ${SERVICE_DATA} | json_pp`
			if [ -z ${SERVICE_PID} ] ; then
				echo "Service is not running"
			else
				echo "pid: ${SERVICE_PID}"
			fi
		else
			echo "Config not found; Maybe it's empty?"
		fi
	}

	hell_conf_show_all() {
		echo "All services configs"
		if [ -f ${FILE_CONF} ] ; then
			cat ${FILE_CONF} | json_pp
		else
			echo "Config not found; Maybe it's empty?"
		fi
	}

	hell_conf_delete() {
		echo "delete service '${SERVICE}'"
		if [ -f ${FILE_CONF} ] ; then
			local res=`cat ${FILE_CONF}`
			echo $res | jshon -Q -d ${SERVICE} > ${FILE_CONF}
		fi
		if [ -f ${FILE_PID} ] ; then
			local res=`cat ${FILE_PID}`
			echo $res | jshon -Q -d ${SERVICE} > ${FILE_PID}
		fi
	}
	if  [[ "$1" = "show-all" ]] ; then
		hell_conf_show_all
	else
		case "$2" in
			"add")
				local new_service_name=$1
				shift
				shift
				hell_conf_add ${new_service_name} $@
			;;
			"delete" | "update" | "show")
				hell_load_service_info $1
				local i=$2
				shift
				shift
				"hell_conf_$i" $@
			;;
			*)
				echo "Unknown command for conf: $1"
				echo "For more info run $ $0 -h"
			;;
		esac
	fi
}

main() {
	if [ -z $1 ] ; then
		help
		exit 1
	fi
	case "$1" in
		"-?" |"-h" | "--help")
			help
			exit 0
		;;
		"conf" | "ctl" | "status")
			local i=$1
			shift
			"hell_$i" $@
			exit 0
		;;
		*)
			echo "Unknown command: $1"
			echo "For more info run $ $0 -h"
			exit 1
		;;
	esac
}

main $@
